// prisma/schema.prisma - VERSION SANS CYCLE
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for user roles
enum Role {
  PROFESSEUR
  ELEVE
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  role            Role              @default(ELEVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ambition        String?
  parentPassword  String?
  points          Int               @default(0)

  // CORRECTION: Utiliser NoAction sur une des relations pour briser le cycle
  classe          Classroom?        @relation("ElevesClasse", fields: [classeId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  classeId        String?

  classrooms      Classroom[]       @relation("ProfesseurClasses")
  sentMessages    Message[]         @relation("SentMessages")
  reactions       Reaction[]
  announcements   Announcement[]
  studentProgress StudentProgress[]
  sessionsAsProf  CoursSession[]    @relation("ProfesseurSessions")
  sessionsAsPart  CoursSession[]    @relation("ParticipantSessions")

  etat        EtatEleve?

  @@index([classeId])
}

model EtatEleve {
  id         String    @id @default(cuid())
  eleve      User      @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String    @unique
  metier     Metier?   @relation(fields: [metierId], references: [id], onDelete: SetNull)
  metierId   String?
  isPunished Boolean   @default(false)
  lastLogin  DateTime?

  @@index([eleveId])
  @@index([metierId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       String?
  eleves      EtatEleve[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ProfesseurClasses", fields: [professeurId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professeurId String
  eleves       User[]         @relation("ElevesClasse")
  sessions     CoursSession[]
  annonces     Announcement[]
  messages     Message[]

  @@index([professeurId])
}

model CoursSession {
  id              String              @id @default(cuid())
  startTime       DateTime            @default(now())
  endTime         DateTime?
  professeur      User                @relation("ProfesseurSessions", fields: [professeurId], references: [id], onDelete: Cascade)
  professeurId    String
  classe          Classroom           @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId     String
  participants    User[]              @relation("ParticipantSessions")
  documentHistory DocumentInHistory[]

  @@index([professeurId])
  @@index([classroomId])
}

model DocumentInHistory {
  id             String       @id @default(cuid())
  name           String
  url            String
  createdAt      DateTime     @default(now())
  coursSession   CoursSession @relation(fields: [coursSessionId], references: [id], onDelete: Cascade)
  coursSessionId String

  @@index([coursSessionId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id], onDelete: Cascade)
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime   @default(now())

  @@index([authorId])
  @@index([classeId])
}

model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  sender      User       @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  classroomId String
  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@index([senderId])
  @@index([classroomId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  @@index([userId])
  @@index([messageId])
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  HOME
  LANGUAGE
  MATH
  SCIENCE
  ART
  SPORTS
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  validationType  ValidationType
  requiresProof   Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  studentProgress StudentProgress[]
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId          String
  status          ProgressStatus @default(TODO)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  feedback        Json?
  recipeName      String?

  @@unique([studentId, taskId])
  @@index([studentId])
  @@index([taskId])
}