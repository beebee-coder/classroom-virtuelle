// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =====================================================================
// ==                            MODÈLES                              ==
// =====================================================================

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  parentPassword  String?        // Mot de passe pour l'espace parental
  role            Role           @default(ELEVE)
  ambition        String?
  points          Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  classe          Classroom?     @relation("MembresClasse", fields: [classeId], references: [id])
  classeId        String?

  annonces        Announcement[]
  messages        Message[]      @relation("MessagesEnvoyes")
  reactions       Reaction[]
  sessionsParticipees CoursSession[] @relation("ParticipantsSession")

  etat            EtatEleve?     @relation(fields: [etatEleveId], references: [id])
  etatEleveId     String?        @unique

  classeEnseignee Classroom[]    @relation("ProfesseurClasse")

  sessionsEnseignees CoursSession[] @relation("ProfesseurSession")
  studentProgress StudentProgress[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("ProfesseurClasse", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]         @relation("MembresClasse")
  sessions     CoursSession[]
  annonces     Announcement[]
  messages     Message[]
}

model EtatEleve {
  id         String     @id @default(cuid())
  eleve      User       @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String     @unique
  isPunished Boolean    @default(false)
  
  metier     Metier?    @relation(fields: [metierId], references: [id], onDelete: SetNull)
  metierId   String?
}

model Metier {
  id          String   @id @default(cuid())
  nom         String
  description String
  icon        String   // Nom de l'icône Lucide
  theme       Json     // Objet JSON pour le thème (couleurs, etc.)
  etats       EtatEleve[]
}

model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  validationType ValidationType
  requiresProof  Boolean        @default(false)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  studentProgress StudentProgress[]
}

model StudentProgress {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  task           Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId         String
  status         ProgressStatus @default(PENDING_VALIDATION)
  completionDate DateTime @default(now())
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?     // Pour les retours détaillés (ex: recette)
  recipeName     String?   // Nom de la recette pour la tâche de cuisine
  
  @@unique([studentId, taskId])
}

model CoursSession {
  id              String    @id @default(cuid())
  professeur      User      @relation("ProfesseurSession", fields: [professeurId], references: [id])
  professeurId    String
  classe          Classroom @relation(fields: [classroomId], references: [id])
  classroomId     String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  participants    User[]    @relation("ParticipantsSession")
  messages        Message[]
  documentHistory DocumentInHistory[]
}

model DocumentInHistory {
  id             String       @id @default(cuid())
  name           String
  url            String
  createdAt      DateTime     @default(now())
  coursSession   CoursSession @relation(fields: [coursSessionId], references: [id], onDelete: Cascade)
  coursSessionId String
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Message {
  id          String         @id @default(cuid())
  message     String
  createdAt   DateTime       @default(now())
  sender      User           @relation("MessagesEnvoyes", fields: [senderId], references: [id])
  senderId    String
  session     CoursSession?  @relation(fields: [sessionId], references: [id])
  sessionId   String?
  classroom   Classroom?     @relation(fields: [classroomId], references: [id])
  classroomId String?
  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

// =====================================================================
// ==                               ENUMS                             ==
// =====================================================================

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  LANGUAGE
  SCIENCE
  ART
  SPORT
  HOME
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
