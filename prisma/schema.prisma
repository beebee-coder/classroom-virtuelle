// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  parentPassword        String?                // Mot de passe pour l'espace parent
  role                  String
  ambition              String?
  points                Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  sessions              Session[]
  classesDirigees       Classroom[]            @relation("ProfessorClasses")
  annonces              Announcement[]
  reactions             Reaction[]
  sessionsCrees         CoursSession[]
  sessionsParticipees   CoursSession[]         @relation("SessionParticipants")
  sentDms               DirectMessage[]        @relation("SentDms")
  receivedDms           DirectMessage[]        @relation("ReceivedDms")
  classe                Classroom?             @relation(fields: [classroomId], references: [id])
  classroomId           String?
  etat                  EtatEleve?
  progress              StudentProgress[]
  brainwaveData         BrainwaveData[]
  VRSessionParticipant  VRSessionParticipant[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       String
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
  isPunished Boolean @default(false)
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation(name: "ProfessorClasses", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eleves       User[]
  annonces     Announcement[]
  cours        CoursSession[]
  messages     Message[]
}

model Task {
  id            String    @id @default(cuid())
  title         String
  description   String
  points        Int
  type          String //  DAILY, WEEKLY, MONTHLY
  category      String // HOME, MATH, LANGUAGE, SCIENCE, ART
  difficulty    String // EASY, MEDIUM, HARD
  validationType String // AUTOMATIC, PROFESSOR, PARENT
  requiresProof Boolean   @default(false)
  attachmentUrl String?
  isActive      Boolean   @default(true)
  startTime     DateTime?
  duration      Int? // en minutes
  progress      StudentProgress[]
}

model StudentProgress {
  id              String          @id @default(cuid())
  studentId       String
  student         User            @relation(fields: [studentId], references: [id])
  taskId          String
  task            Task            @relation(fields: [taskId], references: [id])
  status          String          @default("PENDING") // PENDING, PENDING_VALIDATION, VERIFIED, REJECTED
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int             @default(0)
  accuracy        Float?
  recipeFeedback  RecipeFeedback?
  recipeName      String?
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  attachmentUrl String?
  createdAt     DateTime   @default(now())
}

model Message {
  id           String     @id @default(cuid())
  message      String
  senderId     String
  senderName   String // Denormalized for quick display
  classroomId  String?
  classroom    Classroom? @relation(fields: [classroomId], references: [id])
  createdAt    DateTime   @default(now())
  reactions    Reaction[]
  isQuestion   Boolean?
  conversationId String?
  conversation Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
}

model Conversation {
  id        String    @id @default(cuid())
  initiatorId String
  receiverId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  initiator User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver  User      @relation("Receiver", fields: [receiverId], references: [id])
}

model DirectMessage {
  id           String   @id @default(cuid())
  content      String
  senderId     String
  receiverId   String
  createdAt    DateTime @default(now())
  sender       User     @relation("SentDms", fields: [senderId], references: [id])
  receiver     User     @relation("ReceivedDms", fields: [receiverId], references: [id])
}

model CoursSession {
  id                       String                 @id @default(cuid())
  createdAt                DateTime               @default(now())
  startedAt                DateTime?
  endedAt                  DateTime?
  status                   String                 @default("PENDING") // PENDING, ACTIVE, ENDED
  professeurId             String
  professeur               User                   @relation(fields: [professeurId], references: [id])
  classeId                 String?
  classe                   Classroom?             @relation(fields: [classeId], references: [id])
  participants             User[]                 @relation("SessionParticipants")
  spotlightedParticipantId String?
  timerState               String?
  vrSession                VRSession?
  VRSessionParticipant     VRSessionParticipant[]
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id])
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  totalPoints    Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  rank           Int
  updatedAt      DateTime @updatedAt
}

model BrainwaveData {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  sessionId String // Could link to a CoursSession or a specific VR/Neuro session
  timestamp DateTime @default(now())
  payload   String // Raw data from EEG
}

model RecipeFeedback {
  id           String          @id @default(cuid())
  progressId   String          @unique
  progress     StudentProgress @relation(fields: [progressId], references: [id])
  taste        Int // Note sur 10
  presentation Int // Note sur 10
  autonomy     Int // Note sur 10
  comment      String?
  createdAt    DateTime        @default(now())
}

model VRSession {
  id           String                 @id @default(cuid())
  coursSession CoursSession?            @relation(fields: [coursSessionId], references: [id])
  coursSessionId String?                @unique
  scenario     String // e.g., "Space Exploration", "Historic Battle"
  createdAt    DateTime               @default(now())
  state        String // Scene graph, user positions, etc.
  participants VRSessionParticipant[]
}

model VRSessionParticipant {
  id          String       @id @default(cuid())
  vrSession   VRSession    @relation(fields: [vrSessionId], references: [id])
  vrSessionId String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  joinedAt    DateTime     @default(now())
  role        String // e.g., "Observer", "Active Participant"
  coursSession CoursSession? @relation(fields: [coursSessionId], references: [id])
  coursSessionId String?
}

    