// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ELEVE)
  points        Int       @default(0)
  ambition      String?
  parentPassword String?

  classeId String?
  classe   Classroom? @relation(fields: [classeId], references: [id])

  etat      EtatEleve?
  progress  StudentProgress[]
  sessionsParticipees CoursSession[] @relation("SessionParticipants")
  annonces  Announcement[]
  messages  Message[]
  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id           String    @id @default(cuid())
  nom          String
  professeurId String
  professeur   User      @relation(fields: [professeurId], references: [id], onDelete: Cascade)
  eleves       User[]
  annonces     Announcement[]
  sessions     CoursSession[]
  messages     Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Metier {
  id          String   @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       String // JSON string for theme properties
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)
  isPunished Boolean @default(false)
}

model Task {
  id              String         @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  isActive        Boolean        @default(true)
  requiresProof   Boolean        @default(false)
  validationType  ValidationType @default(PROFESSOR)
  studentProgress StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus @default(TODO)
  completionDate DateTime       @default(now())
  submissionUrl  String?
  feedback       Json?          // For teacher or parent feedback
  pointsAwarded  Int?
  recipeName     String?

  @@unique([studentId, taskId])
}

model CoursSession {
  id              String   @id @default(cuid())
  startTime       DateTime @default(now())
  endTime         DateTime?
  professeurId    String
  professeur      User     @relation(fields: [professeurId], references: [id], onDelete: Cascade)
  classroomId     String
  classe          Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  participants    User[]   @relation("SessionParticipants")
  documentHistory Json     @default("[]")
}

model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  authorId      String
  author        User      @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id            String   @id @default(cuid())
  message       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  senderId      String
  sender        User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  classroomId   String
  classroom     Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  reactions     Reaction[]
  isQuestion    Boolean  @default(false)
  directMessageSenderId String?
  conversationId String?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  SCIENCE
  LANGUAGE
  ART
  SPORT
  HOME
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
