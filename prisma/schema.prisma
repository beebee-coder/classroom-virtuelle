// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// --------------------------------------
// ÉNUMÉRATIONS
// --------------------------------------

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  SCIENCE
  LANGUAGE
  ART
  HOME
  SPORTS
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

// --------------------------------------
// MODÈLES PRINCIPAUX
// --------------------------------------

model User {
  id                      String        @id @default(cuid())
  name                    String?
  email                   String?       @unique
  emailVerified           DateTime?
  image                   String?
  parentPassword          String?
  role                    Role
  ambition                String?
  points                  Int?          @default(0)
  // Relations
  classe                  Classroom?    @relation("EleveDe", fields: [classroomId], references: [id])
  classroomId             String?
  classesEnseignees       Classroom[]   @relation("ProfesseurDe")
  etat                    EtatEleve?
  messagesEnvoyes         Message[]     @relation("SenderMessages")
  messagesDirectsEnvoyes  Message[]     @relation("DirectSenderMessages")
  conversationsInitiated  Conversation[] @relation("Initiator")
  conversationsReceived   Conversation[] @relation("Receiver")
  reactions               Reaction[]
  annonces                Announcement[]
  sessionsCrees           CoursSession[] @relation("SessionProfesseur")
  sessionsParticipees     Participant[]
  progress                StudentProgress[]

  @@index([classroomId])
}

model Classroom {
  id           String  @id @default(cuid())
  nom          String
  // Relations
  professeur   User    @relation("ProfesseurDe", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]  @relation("EleveDe")
  annonces     Annonce[]
  messages     Message[]
  coursSession CoursSession[]

  @@index([professeurId])
}

model EtatEleve {
  id         String  @id @default(cuid())
  isPunished Boolean @default(false)
  // Relations
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@index([metierId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // ex: { primary: '#RRGGBB', accent: '#RRGGBB', etc. }
  // Relations
  eleves      EtatEleve[]
}

model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  validationType ValidationType
  requiresProof  Boolean        @default(false)
  attachmentUrl  String?
  isActive       Boolean        @default(true)
  startTime      DateTime?
  duration       Int? // en minutes
  // Relations
  progress       StudentProgress[]
}

model StudentProgress {
  id             String         @id @default(cuid())
  status         ProgressStatus @default(NOT_STARTED)
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  accuracy       Float?
  recipeName     String?
  // Relations
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId         String

  @@unique([studentId, taskId])
  @@index([studentId])
  @@index([taskId])
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  rank           Int
  totalPoints    Int
  dailyPoints    Int
  weeklyPoints   Int
  monthlyPoints  Int
  completedTasks Int
  currentStreak  Int
  bestStreak     Int
  updatedAt      DateTime @updatedAt
}

// Pour les annonces publiques ou de classe
model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime  @default(now())
  // Relations
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?

  @@index([authorId])
  @@index([classeId])
}

// Session de cours en direct
model CoursSession {
  id                      String        @id @default(cuid())
  createdAt               DateTime      @default(now())
  startedAt               DateTime?
  endedAt                 DateTime?
  // Relations
  professeur              User          @relation("SessionProfesseur", fields: [professeurId], references: [id])
  professeurId            String
  classe                  Classroom     @relation(fields: [classeId], references: [id])
  classeId                String
  participants            Participant[]
  spotlightedParticipantId String?

  @@index([professeurId])
  @@index([classeId])
}

model Participant {
  id           String       @id @default(cuid())
  joinedAt     DateTime     @default(now())
  leftAt       DateTime?
  isOnline     Boolean      @default(true)
  // Relations
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  session      CoursSession @relation(fields: [sessionId], references: [id])
  sessionId    String

  @@unique([userId, sessionId])
}

// Modèles pour le Chat
model Message {
  id           String    @id @default(cuid())
  message      String
  createdAt    DateTime  @default(now())
  isQuestion   Boolean?
  // Expéditeur
  sender       User      @relation("SenderMessages", fields: [senderId], references: [id])
  senderId     String
  // Destinataire (pour DM)
  directMessageSender User? @relation("DirectSenderMessages", fields: [directMessageSenderId], references: [id])
  directMessageSenderId String?
  // Relations
  classe       Classroom? @relation(fields: [classroomId], references: [id])
  classroomId  String?
  conversation Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  reactions    Reaction[]

  @@index([senderId])
  @@index([classroomId])
  @@index([conversationId])
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // Relations
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]

  @@unique([initiatorId, receiverId])
  @@index([receiverId])
}


model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}

// --------------------------------------
// MODÈLES D'AUTHENTIFICATION (NextAuth.js)
// --------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
