// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String         @unique
  emailVerified   DateTime?
  image           String?
  role            Role           @default(ELEVE)
  points          Int            @default(0)
  ambition        String?
  parentPassword  String?
  classe          Classroom?     @relation(fields: [classeId], references: [id])
  classeId        String?
  sessionsCrees   CoursSession[] @relation("ProfesseurSessions")
  sessionsParticipees CoursSession[] @relation("ParticipantsSessions")
  announcements   Announcement[]
  sentMessages    Message[]      @relation("SentMessages")
  reactions       Reaction[]
  studentProgress StudentProgress[]
  etat            EtatEleve?
  createdAt       DateTime       @default(now())
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  sessions     CoursSession[]
  announcements Announcement[]
  messages     Message[]
  createdAt    DateTime       @default(now())

  @@unique([nom, professeurId])
}

model CoursSession {
  id            String    @id @default(cuid())
  professeur    User      @relation("ProfesseurSessions", fields: [professeurId], references: [id])
  professeurId  String
  classe        Classroom @relation(fields: [classroomId], references: [id])
  classroomId   String
  participants  User[]    @relation("ParticipantsSessions")
  startTime     DateTime  @default(now())
  endTime       DateTime?
  documentHistory Json[]  @default([])
  createdAt     DateTime  @default(now())
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // Storing theme as a JSON object
  etatsEleves EtatEleve[]
  createdAt   DateTime    @default(now())
}

model EtatEleve {
  id           String      @id @default(cuid())
  eleve        User        @relation(fields: [eleveId], references: [id])
  eleveId      String      @unique
  metier       Metier?     @relation(fields: [metierId], references: [id])
  metierId     String?
  isPunished   Boolean     @default(false)
  comprehension String? // ex: 'confus', 'compris', 'perdu'
  isHandRaised Boolean     @default(false)
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  SCIENCE
  LANGUAGE
  ART
  HOME
  SPORT
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

model Task {
  id            String        @id @default(cuid())
  title         String        @unique
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  validationType ValidationType
  requiresProof Boolean       @default(false)
  isActive      Boolean       @default(true)
  studentProgress StudentProgress[]
  createdAt     DateTime      @default(now())
}

enum ProgressStatus {
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

model StudentProgress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(PENDING_VALIDATION)
  completionDate DateTime       @default(now())
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?
  recipeName     String?
  createdAt      DateTime       @default(now())
  
  @@unique([studentId, taskId, type])
}

model Announcement {
  id          String     @id @default(cuid())
  title       String
  content     String
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  classe      Classroom? @relation(fields: [classeId], references: [id])
  classeId    String?
  attachmentUrl String?
  createdAt   DateTime   @default(now())
}

model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  sender      User       @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  classroom   Classroom  @relation(fields: [classroomId], references: [id])
  classroomId String
  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}
