// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum pour les rôles
enum Role {
  ELEVE
  PROFESSEUR
}

// Modèle Utilisateur
model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  role              Role        @default(ELEVE)
  classeId          String?
  classe            Classroom?  @relation("ClasseEleves", fields: [classeId], references: [id])
  classesEnseignees Classroom[] @relation("ProfesseurClasses")
  points            Int         @default(0)
  ambition          String?
  parentPassword    String? // Mot de passe pour la validation parentale (NON HASHÉ pour la démo)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  sentMessages        Message[]
  reactions           Reaction[]
  announcements       Announcement[]
  sessionsParticipees CoursSession[]    @relation("Participants")
  studentProgress     StudentProgress[]
  etat                EtatEleve?
  CoursSession        CoursSession[]

  @@map("users")
}

// Modèle Classe
model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ProfesseurClasses", fields: [professeurId], references: [id])
  eleves       User[]         @relation("ClasseEleves")
  sessions     CoursSession[]
  annonces     Announcement[]

  @@map("classrooms")
}

// Modèle Session de Cours
model CoursSession {
  id              String    @id @default(cuid())
  startTime       DateTime  @default(now())
  endTime         DateTime?
  professeurId    String
  professeur      User      @relation(fields: [professeurId], references: [id])
  classroomId     String
  classe          Classroom @relation(fields: [classroomId], references: [id])
  participants    User[]    @relation("Participants")
  documentHistory Json[]    @default([])

  @@map("cours_sessions")
}

// Modèle État de l'élève
model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
  isPunished Boolean @default(false)

  @@map("etats_eleves")
}

// Modèle Métier
model Metier {
  id          String      @id
  nom         String
  description String
  icon        String
  theme       Json // Stocke les couleurs, curseur, etc.
  eleves      EtatEleve[]

  @@map("metiers")
}

// Enums pour les tâches
enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  HOME
  MATH
  LANGUAGE
  SCIENCE
  ART
  SPORT
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

// Modèle Tâche
model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  validationType ValidationType
  requiresProof  Boolean        @default(false)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())

  studentProgress StudentProgress[]

  @@map("tasks")
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

// Modèle Progression de l'élève
model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id])
  status         ProgressStatus @default(TODO)
  completionDate DateTime       @default(now())
  submissionUrl  String? // URL de la preuve (image, etc.)
  pointsAwarded  Int?
  feedback       Json? // Stocke le feedback détaillé
  recipeName     String? // Nom de la recette pour les tâches de cuisine

  @@unique([studentId, taskId])
  @@map("student_progress")
}

// Modèle Message pour le chat de classe
model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  classroomId String
  senderId    String
  sender      User       @relation(fields: [senderId], references: [id])
  reactions   Reaction[]

  @@map("messages")
}

// Modèle Réaction à un message
model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@map("reactions")
}

// Modèle Annonce
model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])

  @@map("announcements")
}
