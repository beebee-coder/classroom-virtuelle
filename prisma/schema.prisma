// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================================
//                MODÈLES
// ========================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ELEVE)
  points        Int       @default(0)
  ambition      String?
  parentPassword String?

  // Relations
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  
  announcements Announcement[] @relation("AuthoredAnnouncements")
  
  sentMessages  Message[]   @relation("SentMessages")
  reactions     Reaction[]
  
  etat          EtatEleve?

  sessionsEnseignees CoursSession[] @relation("TaughtSessions")
  sessionsParticipees CoursSession[] @relation("ParticipatedSessions")
  
  studentProgress StudentProgress[]

  // Champs NextAuth
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id           String    @id @default(cuid())
  nom          String
  professeurId String
  
  // Relations
  professeur   User   @relation(fields: [professeurId], references: [id], onDelete: Cascade)
  eleves       User[]
  annonces     Announcement[] @relation("ClassAnnouncements")
  sessions     CoursSession[]
  messages     Message[]

  @@unique([nom, professeurId])
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id], onDelete: SetNull)

  isPunished Boolean @default(false)
  
  comprehension String? // ex: 'COMPRIS', 'CONFUS', 'PERDU'
  isHandRaised  Boolean @default(false)
}

model Metier {
  id          String  @id @default(cuid())
  nom         String  @unique
  description String
  icon        String
  theme       Json    // JSON pour stocker les couleurs, etc.
  
  etatsEleves EtatEleve[]
}

model Task {
  id             String      @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  validationType ValidationType
  requiresProof  Boolean     @default(false)
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  studentProgress StudentProgress[]
}

model StudentProgress {
  id             String    @id @default(cuid())
  studentId      String
  taskId         String
  status         ProgressStatus @default(TODO)
  completionDate DateTime? @default(now())
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?     // Pour les retours détaillés (recette, etc.)
  recipeName     String?

  student        User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([studentId, taskId])
}


model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  attachmentUrl  String?
  createdAt      DateTime  @default(now())
  
  authorId       String
  author         User      @relation("AuthoredAnnouncements", fields: [authorId], references: [id])
  
  classeId       String?
  classe         Classroom? @relation("ClassAnnouncements", fields: [classeId], references: [id])
}

model Message {
  id          String   @id @default(cuid())
  message     String
  createdAt   DateTime @default(now())
  
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)

  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}


model CoursSession {
  id              String    @id @default(cuid())
  professeurId    String
  classroomId     String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  documentHistory Json      @default("[]")

  professeur      User      @relation("TaughtSessions", fields: [professeurId], references: [id])
  classe          Classroom @relation(fields: [classroomId], references: [id])
  participants    User[]    @relation("ParticipatedSessions")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}


// ========================================
//                ENUMS
// ========================================

enum Role {
  ELEVE
  PROFESSEUR
  ADMIN
  PARENT
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  SCIENCE
  LANGUAGE
  ART
  SPORT
  HOME
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
