// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// --------------------------------------
// MODÈLES DE L'APPLICATION
// --------------------------------------

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  parentPassword        String?
  role                  String    // Remplacé: Role
  points                Int       @default(0)
  ambition              String?
  
  // Relations
  classe                Classroom? @relation(fields: [classroomId], references: [id])
  classroomId           String?
  
  annonces              Announcement[]
  progress              StudentProgress[]
  reactions             Reaction[]
  
  sentDMs               Conversation[] @relation("Initiator")
  receivedDMs           Conversation[] @relation("Receiver")
  
  etat                  EtatEleve?
  
  // Pour les professeurs
  classesDirigees       Classroom[] @relation("ProfessorClasses")

  sessionsParticipees   CoursSessionParticipant[]

  @@index([classroomId])
}


model EtatEleve {
  id          String   @id @default(cuid())
  eleveId     String   @unique
  eleve       User     @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished  Boolean  @default(false)
  metierId    String?
  metier      Metier?  @relation(fields: [metierId], references: [id], onDelete: SetNull)

  @@index([metierId])
}


model Classroom {
  id              String         @id @default(cuid())
  nom             String
  professeurId    String
  professeur      User           @relation(fields: [professeurId], references: [id], name: "ProfessorClasses")
  eleves          User[]
  annonces        Announcement[]
  sessions        CoursSession[]
  chatMessages    Message[]

  @@index([professeurId])
}

model Metier {
  id          String  @id @default(cuid())
  nom         String  @unique
  description String
  icon        String
  theme       Json
  eleves      EtatEleve[]
}

model Task {
  id              String  @id @default(cuid())
  title           String
  description     String?
  points          Int
  type            String  // Remplacé: TaskType
  category        String  // Remplacé: TaskCategory
  difficulty      String  // Remplacé: TaskDifficulty
  validationType  String  // Remplacé: ValidationType
  requiresProof   Boolean @default(false)
  isActive        Boolean @default(true)
  attachmentUrl   String?
  startTime       DateTime?
  duration        Int? // en minutes

  progress        StudentProgress[]
}


model StudentProgress {
  id              String    @id @default(cuid())
  studentId       String
  student         User      @relation(fields: [studentId], references: [id])
  taskId          String
  task            Task      @relation(fields: [taskId], references: [id])
  completionDate  DateTime  @default(now())
  status          String    @default("PENDING") // Remplacé: ProgressStatus
  submissionUrl   String?
  pointsAwarded   Int       @default(0)
  accuracy        Float?
  recipeName      String?
  
  recipeFeedback  RecipeFeedback?

  @@unique([studentId, taskId])
  @@index([studentId])
  @@index([taskId])
}


model Announcement {
  id             String     @id @default(cuid())
  title          String
  content        String
  authorId       String
  author         User       @relation(fields: [authorId], references: [id])
  classeId       String?
  classe         Classroom? @relation(fields: [classeId], references: [id])
  createdAt      DateTime   @default(now())
  attachmentUrl  String?

  @@index([authorId])
  @@index([classeId])
}

// ---- Modèles pour le chat ----
model Message {
  id                   String      @id @default(cuid())
  message              String
  createdAt            DateTime    @default(now())
  
  // Contexte du message
  classroomId          String?
  classroom            Classroom?  @relation(fields: [classroomId], references: [id])

  isQuestion           Boolean?
  
  // Pour les DM
  conversationId       String?
  conversation         Conversation? @relation(fields: [conversationId], references: [id])

  // L'expéditeur
  senderId             String
  senderName           String? // Stocker le nom pour un accès rapide

  directMessageSenderId String?
  
  // Réactions
  reactions            Reaction[]

  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}


model Conversation {
  id           String    @id @default(cuid())
  initiatorId  String
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiverId   String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]

  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
}


// ---- Modèles pour la session vidéo ----

model CoursSession {
  id            String   @id @default(cuid())
  professeurId  String
  classroomId   String
  classroom     Classroom @relation(fields: [classroomId], references: [id])
  startTime     DateTime @default(now())
  endedAt       DateTime?
  
  participants  CoursSessionParticipant[]
}

model CoursSessionParticipant {
    id            String        @id @default(cuid())
    sessionId     String
    session       CoursSession  @relation(fields: [sessionId], references: [id])
    userId        String
    user          User          @relation(fields: [userId], references: [id])
    joinedAt      DateTime      @default(now())
    leftAt        DateTime?

    @@unique([sessionId, userId])
}


model Leaderboard {
  id              String   @id @default(cuid())
  studentId       String   @unique
  dailyPoints     Int      @default(0)
  weeklyPoints    Int      @default(0)
  monthlyPoints   Int      @default(0)
  totalPoints     Int      @default(0)
  completedTasks  Int      @default(0)
  currentStreak   Int      @default(0)
  bestStreak      Int      @default(0)
  lastActivity    DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rank            Int      @default(0)
}

model RecipeFeedback {
  id            String    @id @default(cuid())
  progressId    String    @unique
  progress      StudentProgress @relation(fields: [progressId], references: [id])
  taste         Int // Note sur 10
  presentation  Int // Note sur 10
  autonomy      Int // Note sur 10
  comment       String?
  createdAt     DateTime  @default(now())
}
