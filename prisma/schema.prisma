// prisma/schema.prisma

// Fournisseur de base de données
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Générateur de client Prisma
generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  LANGUAGE
  SCIENCE
  ART
  HOME
  SPORT
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

// Modèles
model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  emailVerified   DateTime?
  image           String?
  role            Role          @default(ELEVE)
  points          Int           @default(0)
  ambition        String?
  parentPassword  String?
  
  // Relations
  classrooms      Classroom[]   @relation("ClassroomStudents")
  
  // Relations pour le professeur
  classesEnseignees Classroom[] @relation("ClassroomProfesseur")
  
  sessionsEnseignees  CoursSession[] @relation("SessionProfesseur")
  sessionsParticipees CoursSession[] @relation("SessionParticipants")
  
  announcements     Announcement[]
  sentMessages      Message[]   @relation("MessageSender")
  reactions         Reaction[]  @relation("ReactionUser")
  progress          StudentProgress[]
  etat              EtatEleve?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Classroom {
  id            String      @id @default(cuid())
  nom           String
  professeurId  String
  
  // Relations
  professeur    User        @relation("ClassroomProfesseur", fields: [professeurId], references: [id])
  eleves        User[]      @relation("ClassroomStudents")
  sessions      CoursSession[] @relation("ClassroomSessions")
  announcements Announcement[] @relation("ClassroomAnnouncements")
  messages      Message[]   @relation("ClassroomMessages")

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([nom, professeurId])
}

model Metier {
  id          String @id @default(cuid())
  nom         String @unique
  description String
  icon        String
  theme       Json?
  etatsEleves EtatEleve[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EtatEleve {
  id          String  @id @default(cuid())
  eleveId     String  @unique
  eleve       User    @relation(fields: [eleveId], references: [id])
  
  isPunished  Boolean @default(false)
  metierId    String?
  metier      Metier? @relation(fields: [metierId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CoursSession {
  id              String    @id @default(cuid())
  professeurId    String
  classroomId     String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  documentHistory Json[]    @default([])
  
  // Relations
  professeur      User      @relation("SessionProfesseur", fields: [professeurId], references: [id])
  classe          Classroom @relation("ClassroomSessions", fields: [classroomId], references: [id])
  participants    User[]    @relation("SessionParticipants")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Task {
  id              String      @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  validationType  ValidationType
  requiresProof   Boolean     @default(false)
  isActive        Boolean     @default(true)
  
  studentProgress StudentProgress[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model StudentProgress {
  id              String      @id @default(cuid())
  studentId       String
  taskId          String
  status          ProgressStatus @default(TODO)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  feedback        Json?
  recipeName      String?

  // Relations
  student         User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  task            Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([studentId, taskId])
}

model Announcement {
  id            String    @id @default(cuid())
  title         String
  content       String
  authorId      String
  classeId      String?
  attachmentUrl String?
  
  // Relations
  author        User      @relation(fields: [authorId], references: [id])
  classe        Classroom? @relation("ClassroomAnnouncements", fields: [classeId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id          String    @id @default(cuid())
  message     String
  createdAt   DateTime  @default(now())
  
  // Relations
  senderId    String
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])
  
  classroomId String
  classroom   Classroom @relation("ClassroomMessages", fields: [classroomId], references: [id])

  reactions   Reaction[]
}

model Reaction {
  id        String    @id @default(cuid())
  emoji     String
  
  // Relations
  userId    String
  user      User      @relation("ReactionUser", fields: [userId], references: [id])
  
  messageId String
  message   Message   @relation(fields: [messageId], references: [id])
  
  @@unique([userId, messageId, emoji])
}