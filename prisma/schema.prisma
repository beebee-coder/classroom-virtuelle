// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===================================
// Modèles de Base
// ===================================

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  name                String?
  password            String?
  image               String?
  role                Role              @default(ELEVE)
  points              Int               @default(0)
  ambition            String?
  parentPassword      String?
  classeId            String?
  classe              Classroom?        @relation("ClassMembers", fields: [classeId], references: [id], onDelete: SetNull)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  announcements       Announcement[]
  sessionsEnseignees  CoursSession[]    @relation("ProfesseurSessions")
  sessionsParticipees CoursSession[]    @relation("Participants")
  studentProgress     StudentProgress[]
  messages            Message[]
  reactions           Reaction[]
  etat                EtatEleve?
  classesEnseignees   Classroom[]       @relation("TeacherClasses")
}

model Classroom {
  id            String         @id @default(cuid())
  nom           String
  professeurId  String
  professeur    User           @relation("TeacherClasses", fields: [professeurId], references: [id], onDelete: Cascade)
  eleves        User[]         @relation("ClassMembers")
  announcements Announcement[]
  sessions      CoursSession[]
  messages      Message[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([professeurId])
}

// ===================================
// Modèles Métiers et Compétences
// ===================================

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json?
  eleves      EtatEleve[]
}

// ===================================
// Modèles de Contenu & Activités
// ===================================

model CoursSession {
  id              String              @id @default(cuid())
  professeurId    String
  professeur      User                @relation("ProfesseurSessions", fields: [professeurId], references: [id])
  classroomId     String
  classe          Classroom           @relation(fields: [classroomId], references: [id])
  participants    User[]              @relation("Participants")
  startTime       DateTime            @default(now())
  endTime         DateTime?
  documentHistory DocumentInHistory[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([professeurId])
  @@index([classroomId])
}

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  validationType  ValidationType
  requiresProof   Boolean           @default(false)
  isActive        Boolean           @default(true)
  studentProgress StudentProgress[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus @default(IN_PROGRESS)
  completionDate DateTime?      @default(now())
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?
  recipeName     String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([studentId, taskId])
  @@index([studentId])
  @@index([taskId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([authorId])
  @@index([classeId])
}

// ===================================
// Modèles pour le Chat
// ===================================

model Message {
  id          String     @id @default(cuid())
  message     String
  classroomId String
  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  senderId    String
  sender      User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  reactions   Reaction[]
  createdAt   DateTime   @default(now())

  @@index([classroomId])
  @@index([senderId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

// ===================================
// Modèles d'État et de Support
// ===================================

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model DocumentInHistory {
  id             String       @id @default(cuid())
  name           String
  url            String
  createdAt      DateTime     @default(now())
  coursSession   CoursSession @relation(fields: [coursSessionId], references: [id])
  coursSessionId String

  @@index([coursSessionId])
}

// ===================================
// Énumérations
// ===================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  SCIENCE
  LANGUAGE
  ART
  SPORT
  HOME
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PROFESSOR
  PARENT
}

enum ProgressStatus {
  IN_PROGRESS
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
