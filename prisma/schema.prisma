// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// ===================================
//              MODÈLES
// ===================================

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  image            String?
  role             Role
  classeId         String?
  ambition         String?
  points           Int             @default(0)
  parentPassword   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  classe           Classroom?      @relation("ParticipeA", fields: [classeId], references: [id])
  sessionsDirigees CoursSession[]  @relation("Dirige")
  classesEnseignees Classroom[]     @relation("Enseigne")
  annonces         Announcement[]
  sessionsParticipees CoursSession[]
  etat             EtatEleve?
  messages         Message[]
  reactions        Reaction[]
  conversationsInitiated Conversation[] @relation("Initiator")
  conversationsReceived  Conversation[] @relation("Receiver")
  progression      StudentProgress[]
  leaderboard      Leaderboard?

  @@map("users")
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation("Enseigne", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]         @relation("ParticipeA")
  annonces     Announcement[]
  sessions     CoursSession[]

  @@map("classes")
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json      // Stocke les couleurs, curseur, etc.
  eleves      EtatEleve[]

  @@map("metiers")
}

model CoursSession {
  id           String   @id @default(cuid())
  professeur   User     @relation("Dirige", fields: [professeurId], references: [id])
  professeurId String
  classe       Classroom @relation(fields: [classeId], references: [id])
  classeId     String
  participants User[]
  startTime    DateTime @default(now())
  endTime      DateTime?

  @@map("sessions")
}

model Leaderboard {
  id              String   @id @default(cuid())
  student         User     @relation(fields: [studentId], references: [id])
  studentId       String   @unique
  rank            Int
  dailyPoints     Int      @default(0)
  weeklyPoints    Int      @default(0)
  monthlyPoints   Int      @default(0)
  totalPoints     Int      @default(0)
  completedTasks  Int      @default(0)
  currentStreak   Int      @default(0)
  bestStreak      Int      @default(0)
  updatedAt       DateTime @updatedAt

  @@map("leaderboards")
}

model Task {
  id           String        @id @default(cuid())
  title        String
  description  String
  points       Int
  type         TaskType
  category     TaskCategory
  difficulty   TaskDifficulty
  validationType ValidationType
  requiresProof Boolean      @default(false)
  attachmentUrl String?
  isActive     Boolean      @default(true)
  startTime    DateTime?
  duration     Int? // en minutes
  progress     StudentProgress[]

  @@map("tasks")
}

model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(PENDING_ASSIGNMENT)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  accuracy        Float? // Pourcentage de précision pour les quiz
  recipeName      String? // Nom de la recette pour la tâche de cuisine

  @@unique([studentId, taskId])
  @@map("student_progress")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  isPunished Boolean @default(false)
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?

  @@map("etats_eleves")
}

model Announcement {
  id           String    @id @default(cuid())
  title        String
  content      String
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  classe       Classroom? @relation(fields: [classeId], references: [id])
  classeId     String?
  attachmentUrl String?
  createdAt    DateTime  @default(now())

  @@map("announcements")
}


// MODÈLES POUR LE CHAT ET LA MESSAGERIE
model Message {
  id              String        @id @default(cuid())
  message         String
  createdAt       DateTime      @default(now())
  sender          User          @relation(fields: [senderId], references: [id])
  senderId        String
  isQuestion      Boolean       @default(false)
  
  // Pour le chat de classe
  classeId        String?
  
  // Pour les messages directs
  conversationId  String?
  conversation    Conversation? @relation("ConversationMessages", fields: [conversationId], references: [id])
  
  // Pour le chat de session vidéo
  directMessageSenderId String?
  
  reactions       Reaction[]
  
  @@map("messages")
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId, emoji])
  @@map("reactions")
}

model Conversation {
  id           String    @id @default(cuid())
  initiator    User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId  String
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[] @relation("ConversationMessages")

  @@unique([initiatorId, receiverId])
  @@map("conversations")
}


// ===================================
//               ENUMS
// ===================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  LANGUAGE
  SCIENCE
  HISTORY
  ART
  SPORT
  HOME
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  PENDING_ASSIGNMENT
  IN_PROGRESS
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
