// prisma/schema.prisma

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String?               @unique
  emailVerified         DateTime?
  image                 String?
  role                  String
  ambition              String?
  points                Int                   @default(0)
  parentPassword        String?
  sessionsParticipees   CoursSession[]        @relation("Participants")
  announcements         Announcement[]
  messages              Message[]
  reactions             Reaction[]
  etat                  EtatEleve?
  leaderboard           Leaderboard?
  progress              StudentProgress[]
  conversationInitiated Conversation[]        @relation("Initiator")
  conversationReceived  Conversation[]        @relation("Receiver")
  classe                Classroom?            @relation(fields: [classroomId], references: [id])
  classroomId           String?
  classesDirigees       Classroom[]           @relation("ProfessorClasses")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enum remplacé par String
// enum Role {
//   PROFESSEUR
//   ELEVE
// }

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       String
  eleves      EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
  isPunished Boolean @default(false)
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation(name: "ProfessorClasses", fields: [professeurId], references: [id])
  eleves       User[]
  annonces     Announcement[]
  sessions     CoursSession[]
  messages     Message[]
}

// Enum remplacé par String
// enum TaskType {
//   DAILY
//   WEEKLY
//   MONTHLY
// }

// Enum remplacé par String
// enum TaskCategory {
//   ACADEMIC
//   CREATIVE
//   CHORE
//   WELLNESS
//   SOCIAL
//   MATH
//   LANGUAGE
//   SCIENCE
//   ART
//   HOME
// }

// Enum remplacé par String
// enum TaskDifficulty {
//   EASY
//   MEDIUM
//   HARD
// }

// Enum remplacé par String
// enum ValidationType {
//   AUTOMATIC
//   PROFESSOR
//   PARENT
// }

model Task {
  id             String            @id @default(cuid())
  title          String
  description    String
  points         Int
  type           String // TaskType
  category       String // TaskCategory
  difficulty     String // TaskDifficulty
  validationType String // ValidationType
  requiresProof  Boolean           @default(false)
  isActive       Boolean           @default(true)
  attachmentUrl  String?
  startTime      DateTime?
  duration       Int? // en minutes
  studentProgress  StudentProgress[]
}

// Enum remplacé par String
// enum ProgressStatus {
//   PENDING
//   PENDING_VALIDATION
//   VERIFIED
//   REJECTED
// }

model StudentProgress {
  id              String          @id @default(cuid())
  student         User            @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task            @relation(fields: [taskId], references: [id])
  taskId          String
  status          String          @default("PENDING") // ProgressStatus
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  accuracy        Float?
  recipeFeedback  RecipeFeedback?
  recipeName      String?

  @@unique([studentId, taskId])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
}

model Message {
  id           String        @id @default(cuid())
  message      String
  createdAt    DateTime      @default(now())
  sender       User          @relation(fields: [senderId], references: [id])
  senderId     String
  senderName   String?
  classroomId  String?
  classroom    Classroom?    @relation(fields: [classroomId], references: [id])
  isQuestion   Boolean?
  reactions    Reaction[]
  conversationId String?
  conversation  Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model CoursSession {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  endedAt                 DateTime?
  professeurId            String
  professeur              User     @relation(fields: [professeurId], references: [id])
  classeId                String?
  classe                  Classroom? @relation(fields: [classeId], references: [id])
  participants            User[]   @relation("Participants")
  spotlightedParticipantId String?
}

model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  totalPoints    Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int
  lastReset      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RecipeFeedback {
  id           String          @id @default(cuid())
  progressId   String          @unique
  progress     StudentProgress @relation(fields: [progressId], references: [id])
  taste        Int // Note sur 10
  presentation Int // Note sur 10
  autonomy     Int // Note sur 10
  comment      String?
  createdAt    DateTime        @default(now())
}
