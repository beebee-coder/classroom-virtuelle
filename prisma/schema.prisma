// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  role           Role
  classeId       String?
  classe         Classroom?     @relation("EleveClasse", fields: [classeId], references: [id])
  points         Int            @default(0)
  ambition       String?
  parentPassword String?
  sessions       CoursSession[] @relation("SessionParticipants")

  // Relations
  annonces          Announcement[]
  messagesEnvoyes   Message[]         @relation("Sender")
  reactions         Reaction[]
  progress          StudentProgress[]
  etat              EtatEleve?
  sessionsCrees     CoursSession[]    @relation("SessionProfesseur")
  classesEnseignees Classroom[]       @relation("ClassroomProfesseur")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("ClassroomProfesseur", fields: [professeurId], references: [id])
  eleves       User[]         @relation("EleveClasse")
  annonces     Announcement[]
  messages     Message[]
  sessions     CoursSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // Store theme colors, cursor, etc.
  etatsEleve  EtatEleve[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoursSession {
  id           String    @id @default(cuid())
  professeurId String
  professeur   User      @relation("SessionProfesseur", fields: [professeurId], references: [id])
  classroomId  String
  classe       Classroom @relation(fields: [classroomId], references: [id])
  participants User[]    @relation("SessionParticipants")

  startTime DateTime  @default(now())
  endTime   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id              String            @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType
  category        TaskCategory
  difficulty      TaskDifficulty
  validationType  ValidationType
  requiresProof   Boolean           @default(false)
  attachmentUrl   String?
  isActive        Boolean           @default(true)
  startTime       DateTime?
  duration        Int? // en minutes
  studentProgress StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id])
  status         ProgressStatus @default(PENDING_ASSIGNMENT)
  completionDate DateTime?      @default(now())
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?
  accuracy       Float?
  recipeName     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, taskId])
}

model Message {
  id          String     @id @default(cuid())
  message     String
  senderId    String
  sender      User       @relation("Sender", fields: [senderId], references: [id])
  classroomId String?
  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isQuestion  Boolean    @default(false)
  reactions   Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  createdAt     DateTime   @default(now())
  attachmentUrl String?
}

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  LANGUAGE
  SCIENCE
  HISTORY
  ART
  SPORT
  HOME
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  PENDING_ASSIGNMENT
  IN_PROGRESS
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
