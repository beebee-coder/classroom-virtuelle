// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =================================
// MODÈLES
// =================================

enum Role {
  ELEVE
  PROFESSEUR
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  password        String?
  role            Role
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ambition        String?
  parentPassword  String?        @map("parent_password")
  points          Int            @default(0)
  
  classeId        String?
  classe          Classroom?     @relation("ClassStudents", fields: [classeId], references: [id], onDelete: SetNull)

  classrooms      Classroom[]    @relation("TaughtClasses")
  sentMessages    Message[]
  reactions       Reaction[]
  announcements   Announcement[]
  studentProgress StudentProgress[]

  sessionsAsProf  CoursSession[]  @relation("SessionProfessor")
  sessionsAsPart  CoursSession[]  @relation("SessionParticipants")

  etat            EtatEleve?

  @@map("users")
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation("TaughtClasses", fields: [professeurId], references: [id], onDelete: Cascade)
  eleves       User[]         @relation("ClassStudents")
  sessions     CoursSession[]
  annonces     Announcement[]
  messages     Message[]

  @@map("classrooms")
}

model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  classroomId String
  classroom   Classroom  @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  senderId    String
  sender      User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("reactions")
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  createdAt     DateTime   @default(now())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id], onDelete: SetNull)

  @@map("announcements")
}

model CoursSession {
  id            String    @id @default(cuid())
  startTime     DateTime  @default(now())
  endTime       DateTime?
  professeurId  String
  professeur    User      @relation("SessionProfessor", fields: [professeurId], references: [id], onDelete: Cascade)
  classroomId   String
  classe        Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  participants  User[]    @relation("SessionParticipants")

  documentHistory Document[]

  @@map("cours_sessions")
}

model Document {
  id              String       @id @default(cuid())
  name            String
  url             String
  createdAt       DateTime     @default(now())
  coursSessionId  String
  coursSession    CoursSession @relation(fields: [coursSessionId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model EtatEleve {
  id              String    @id @default(cuid())
  eleveId         String    @unique
  eleve           User      @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metierId        String?
  metier          Metier?   @relation(fields: [metierId], references: [id], onDelete: SetNull)
  isPunished      Boolean   @default(false)
  lastActivity    DateTime  @default(now())
  
  @@map("etats_eleves")
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json?       // JSON pour stocker la palette de couleurs, curseur, etc.
  etats       EtatEleve[]
  
  @@map("metiers")
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  HOME
  LANGUAGE
  MATH
  SCIENCE
  ART
  SPORT
  SOCIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String
  points        Int
  type          TaskType
  category      TaskCategory
  difficulty    TaskDifficulty
  validationType ValidationType
  requiresProof Boolean          @default(false)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  progress      StudentProgress[]

  @@map("tasks")
}

enum ProgressStatus {
  PENDING
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

model StudentProgress {
  id             String         @id @default(cuid())
  studentId      String
  student        User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  taskId         String
  task           Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  status         ProgressStatus @default(PENDING)
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?          // Stocker le feedback parental détaillé pour la tâche de cuisine
  recipeName     String?        // Stocker le nom de la recette

  @@unique([studentId, taskId])
  @@map("student_progress")
}
