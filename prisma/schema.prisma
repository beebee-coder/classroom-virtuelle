// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// --------------------------------------

// Rôles des utilisateurs
enum Role {
  ELEVE
  PROFESSEUR
}

// Modèle Utilisateur
model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  parentPassword  String?
  role            Role
  points          Int?        @default(0)
  ambition        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sessions        Session[]
  accounts        Account[]
  classe          Classroom?  @relation(fields: [classroomId], references: [id])
  classroomId     String?
  announcements   Announcement[]
  reactions       Reaction[]
  etat            EtatEleve?
  sessionsParticipees CoursSession[] @relation("Participants")
  leaderboard     Leaderboard?
  progress        StudentProgress[]
}

// Modèle pour l'état et la personnalisation de l'élève
model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
  isPunished Boolean @default(false)
}

// Modèle pour les métiers/thèmes
model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       Json // { backgroundColor, textColor, primary, accent, cursor }
  eleves      EtatEleve[]
}

// Modèle Classe
model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeur   User           @relation(fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  annonces     Announcement[]
  sessions     CoursSession[]
}

// Modèle Annonce
model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  classe        Classroom? @relation(fields: [classeId], references: [id])
  classeId      String?
  createdAt     DateTime   @default(now())
}

// Modèles pour NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Types pour les tâches
enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  SCIENCE
  LANGUAGE
  ART
  SPORT
  HOME
  SOCIAL
  OTHER
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTO
  PARENT
  PROFESSOR
}

// Modèle Tâche
model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  validationType ValidationType
  requiresProof  Boolean        @default(false)
  attachmentUrl  String?
  isActive       Boolean        @default(true)
  startTime      DateTime? // Pour les tâches planifiées
  duration       Int? // En minutes
  progress       StudentProgress[]
}

enum ProgressStatus {
  PENDING
  IN_PROGRESS
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

// Modèle de progression de l'élève sur une tâche
model StudentProgress {
  id              String         @id @default(cuid())
  student         User           @relation(fields: [studentId], references: [id])
  studentId       String
  task            Task           @relation(fields: [taskId], references: [id])
  taskId          String
  status          ProgressStatus @default(PENDING)
  completionDate  DateTime?
  submissionUrl   String?
  pointsAwarded   Int?
  accuracy        Float? // Pour les quiz, etc.
  recipeName      String?
  taste           Int?
  presentation    Int?
  autonomy        Int?
  parentComment   String?

  @@unique([studentId, taskId, completionDate])
}

// Modèle de Session de cours en direct
model CoursSession {
  id                String       @id @default(cuid())
  professeur        User         @relation("Professeur", fields: [professeurId], references: [id])
  professeurId      String
  participants      User[]       @relation("Participants")
  classe            Classroom    @relation(fields: [classroomId], references: [id])
  classroomId       String
  startTime         DateTime     @default(now())
  endedAt           DateTime?
  comprehensionData Json? // {"studentId": "compris" | "confus" | "perdu"}
  timerState        Json? // { running, time, startedAt }
}

// Modèle de classement
model Leaderboard {
  id             String   @id @default(cuid())
  student        User     @relation(fields: [studentId], references: [id])
  studentId      String   @unique
  rank           Int
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  totalPoints    Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  lastActivity   DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// --------------------------------------
// MODÈLES POUR LE CHAT ET LES CONVERSATIONS
// --------------------------------------
model Message {
  id                   String        @id @default(cuid())
  message              String        @db.Text
  senderId             String
  senderName           String
  classroomId          String? // Si c'est un message de classe
  createdAt            DateTime      @default(now())
  reactions            Reaction[]
  isQuestion           Boolean? // Pourrait être utilisé pour filtrer les questions
  // Pour les messages directs
  conversation         Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId       String?
  directMessageSender  User?         @relation(fields: [directMessageSenderId], references: [id], onDelete: Cascade)
  directMessageSenderId String?

  @@index([classroomId])
  @@index([conversationId])
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  @@unique([userId, messageId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiator   User      @relation("ConversationInitiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User      @relation("ConversationReceiver", fields: [receiverId], references: [id])
  receiverId  String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}
