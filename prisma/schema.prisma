// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================================
// MODÈLES DE L'APPLICATION
// ==============================================================

// Modèle Utilisateur
model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  image               String?
  role                Role             @default(ELEVE)
  points              Int              @default(0)
  ambition            String?
  parentPassword      String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  // Relations
  classeId            String?
  classe              Classroom?       @relation("ClasseEleves", fields: [classeId], references: [id])
  classesEnseignees   Classroom[]      @relation("ProfesseurClasses")
  
  announcements       Announcement[]
  messages            Message[]
  reactions           Reaction[]
  studentProgress     StudentProgress[]
  sessionsParticipees CoursSession[]   @relation("participants")
  sessionsEnseignees  CoursSession[]   @relation("professeur")
  
  etat                EtatEleve?
}

// Modèle Classe
model Classroom {
  id           String         @id @default(cuid())
  nom          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations
  professeurId String
  professeur   User           @relation("ProfesseurClasses", fields: [professeurId], references: [id])
  eleves       User[]         @relation("ClasseEleves")
  
  announcements Announcement[]
  sessions      CoursSession[]
}

// Modèle État de l'élève
model EtatEleve {
  id          String   @id @default(cuid())
  eleveId     String   @unique
  eleve       User     @relation(fields: [eleveId], references: [id])
  
  metierId    String?
  metier      Metier?  @relation(fields: [metierId], references: [id])
  
  isPunished  Boolean  @default(false)
  lastActivity DateTime @default(now())
}

// Modèle Annonce
model Announcement {
  id           String     @id @default(cuid())
  title        String
  content      String
  attachmentUrl String?
  createdAt    DateTime   @default(now())
  
  // Relations
  authorId     String
  author       User       @relation(fields: [authorId], references: [id])
  classeId     String?
  classe       Classroom? @relation(fields: [classeId], references: [id])
}

// Modèle Tâche
model Task {
  id              String         @id @default(cuid())
  title           String
  description     String
  points          Int
  type            TaskType       @default(DAILY)
  category        TaskCategory
  difficulty      TaskDifficulty
  validationType  ValidationType
  requiresProof   Boolean        @default(false)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  studentProgress StudentProgress[]
}

// Modèle Progression de l'élève
model StudentProgress {
  id             String          @id @default(cuid())
  studentId      String
  student        User            @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task            @relation(fields: [taskId], references: [id])
  status         ProgressStatus  @default(PENDING_VALIDATION)
  pointsAwarded  Int?
  feedback       Json?
  submissionUrl  String?
  recipeName     String?
  completionDate DateTime        @default(now())
  
  @@unique([studentId, taskId])
}

// Modèle Métier
model Metier {
  id          String   @id @default(cuid())
  nom         String   @unique
  description String
  icon        String
  theme       Json     // Store theme colors and settings as a JSON object
  
  EtatEleve   EtatEleve[]
}

// Modèle pour les messages dans le chat de classe
model Message {
  id          String    @id @default(cuid())
  message     String
  createdAt   DateTime  @default(now())
  
  // Relations
  senderId    String
  sender      User      @relation(fields: [senderId], references: [id])
  classroomId String
  // Pas de relation ici pour éviter les cycles, l'ID suffit.
  
  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  
  @@unique([userId, messageId, emoji])
}

model CoursSession {
  id             String    @id @default(cuid())
  startTime      DateTime  @default(now())
  endTime        DateTime?
  
  professeurId   String
  professeur     User      @relation("professeur", fields: [professeurId], references: [id])
  
  classroomId    String?
  classe         Classroom? @relation(fields: [classroomId], references: [id])
  
  participants   User[]    @relation("participants")
  documentHistory Json[]   @default([])
}


// ==============================================================
// ÉNUMÉRATIONS
// ==============================================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  MATH
  LANGUAGE
  SCIENCE
  ART
  SPORT
  HOME
  SOCIAL
  OTHER
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}
