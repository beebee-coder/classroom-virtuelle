// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ================================================= //
//                      MODELS                       //
// ================================================= //

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  parentPassword        String?
  role                  String                 @default("ELEVE")
  points                Int                    @default(0)
  ambition              String?
  // Relations
  accounts              Account[]
  sessions              Session[]
  sessionsCrees         CoursSession[]
  classesDirigees       Classroom[]            @relation("ProfessorClasses")
  announcements         Announcement[]
  messages              Message[]
  reactions             Reaction[]
  etat                  EtatEleve?
  progress              StudentProgress[]
  sessionsParticipees   CoursSession[]         @relation("SessionParticipants")
  sentDms               DirectMessage[]        @relation("SentDms")
  receivedDms           DirectMessage[]        @relation("ReceivedDms")
  conversationInitiated Conversation[]         @relation("Initiator")
  conversationReceived  Conversation[]         @relation("Receiver")
  classe                Classroom?             @relation(fields: [classroomId], references: [id])
  classroomId           String?
  leaderboard           Leaderboard?
  directMessages        DirectMessage[]
  brainwaveData         BrainwaveData[]
  emotionalStates       EmotionalState[]
  vrSessions            VRSessionParticipant[]
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String
  theme       String
  eleves      EtatEleve[]
}

model Classroom {
  id           String         @id @default(cuid())
  nom          String
  professeurId String
  professeur   User           @relation(name: "ProfessorClasses", fields: [professeurId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  eleves       User[]
  annonces     Announcement[]
  messages     Message[]
  sessions     CoursSession[]
}

model Task {
  id             String            @id @default(cuid())
  title          String
  description    String?
  points         Int
  type           String
  category       String
  difficulty     String
  validationType String
  requiresProof  Boolean           @default(false)
  isActive       Boolean           @default(true)
  attachmentUrl  String?
  startTime      DateTime?
  duration       Int? // en minutes
  progress       StudentProgress[]
}

model StudentProgress {
  id             String          @id @default(cuid())
  studentId      String
  student        User            @relation(fields: [studentId], references: [id])
  taskId         String
  task           Task            @relation(fields: [taskId], references: [id])
  status         String          @default("PENDING")
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  accuracy       Float?
  recipeName     String?
  recipeFeedback RecipeFeedback?

  @@unique([studentId, taskId])
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  isPunished Boolean @default(false)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Announcement {
  id            String     @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime   @default(now())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  classeId      String?
  classe        Classroom? @relation(fields: [classeId], references: [id])
  attachmentUrl String?
}

model Message {
  id                  String       @id @default(cuid())
  message             String
  createdAt           DateTime     @default(now())
  senderId            String
  sender              User         @relation(fields: [senderId], references: [id])
  classroomId         String?
  classroom           Classroom?   @relation(fields: [classroomId], references: [id])
  isQuestion          Boolean?
  reactions           Reaction[]
  conversationId      String?
  conversation        Conversation? @relation(fields: [conversationId], references: [id])
  directMessageSenderId String?
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
}

model Conversation {
  id          String    @id @default(cuid())
  initiatorId String
  receiverId  String
  initiator   User      @relation("Initiator", fields: [initiatorId], references: [id])
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id])
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([initiatorId, receiverId])
}

model DirectMessage {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedDms", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
}

model CoursSession {
  id                      String        @id @default(cuid())
  createdAt               DateTime      @default(now())
  endedAt                 DateTime?
  professeurId            String
  professeur              User          @relation(fields: [professeurId], references: [id])
  classeId                String?
  classe                  Classroom?    @relation(fields: [classeId], references: [id])
  participants            User[]        @relation("SessionParticipants")
  spotlightedParticipantId String?
  timerState              Json?
  vrSession               VRSession?
}

model Leaderboard {
  id             String   @id @default(cuid())
  studentId      String   @unique
  student        User     @relation(fields: [studentId], references: [id])
  dailyPoints    Int      @default(0)
  weeklyPoints   Int      @default(0)
  monthlyPoints  Int      @default(0)
  totalPoints    Int      @default(0)
  completedTasks Int      @default(0)
  currentStreak  Int      @default(0)
  bestStreak     Int      @default(0)
  rank           Int      @default(0)
  updatedAt      DateTime @updatedAt
}

model RecipeFeedback {
  id             String          @id @default(cuid())
  progressId     String          @unique
  progress       StudentProgress @relation(fields: [progressId], references: [id])
  taste          Int // Note sur 10
  presentation   Int // Note sur 10
  autonomy       Int // Note sur 10
  comment        String?
  recipeName     String
  createdAt      DateTime        @default(now())
}

// ============== ADVANCED FEATURES MODELS ==============

model BrainwaveData {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  payload   Json // Raw data from EEG
}

model EmotionalState {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  sessionId String
  timestamp DateTime @default(now())
  emotion   String // e.g., 'confused', 'engaged', 'bored'
  confidence Float
}

model VRSession {
  id         String                 @id @default(cuid())
  coursId    String                 @unique
  cours      CoursSession           @relation(fields: [coursId], references: [id])
  scenarioId String
  createdAt  DateTime               @default(now())
  state      Json // Scene graph, user positions, etc.
  participants VRSessionParticipant[]
}

model VRSessionParticipant {
  id          String    @id @default(cuid())
  vrSessionId String
  vrSession   VRSession @relation(fields: [vrSessionId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  joinedAt    DateTime  @default(now())
  role        String // 'teacher', 'student'
  
  @@unique([vrSessionId, userId])
}
