// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==================================
//          ENUMS
// ==================================

enum Role {
  ELEVE
  PROFESSEUR
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TaskCategory {
  HOME
  LANGUAGE
  MATH
  SCIENCE
  ART
  SPORT
  SOCIAL
  OTHER
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
}

enum ValidationType {
  AUTOMATIC
  PARENT
  PROFESSOR
}

enum ProgressStatus {
  TODO
  PENDING_VALIDATION
  VERIFIED
  REJECTED
}

// ==================================
//          MODELS
// ==================================

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(ELEVE)
  points         Int       @default(0)
  ambition       String?
  parentPassword String?

  // Relations
  classe   Classroom? @relation("UserClass", fields: [classeId], references: [id])
  classeId String?

  // Relations inverses
  classesEnseignees Classroom[] @relation("ClassroomProfesseur")

  annonces            Announcement[]    @relation("AnnoncesAuteur")
  messages            Message[]
  reactions           Reaction[]
  sessionsCrees       CoursSession[]    @relation("SessionProfesseur")
  sessionsParticipees CoursSession[]    @relation("SessionParticipants")
  studentProgress     StudentProgress[]
  etat                EtatEleve?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classroom {
  id  String @id @default(cuid())
  nom String

  // Relations
  professeur   User   @relation("ClassroomProfesseur", fields: [professeurId], references: [id])
  professeurId String

  eleves   User[]         @relation("UserClass")
  annonces Announcement[] @relation("AnnoncesClasse")
  messages Message[]
  sessions CoursSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Metier {
  id          String @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json

  etatsEleves EtatEleve[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EtatEleve {
  id            String  @id @default(cuid())
  eleve         User    @relation(fields: [eleveId], references: [id])
  eleveId       String  @unique
  metier        Metier? @relation(fields: [metierId], references: [id])
  metierId      String?
  isPunished    Boolean @default(false)
  comprehension String?
  isHandRaised  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoursSession {
  id           String    @id @default(cuid())
  professeur   User      @relation("SessionProfesseur", fields: [professeurId], references: [id])
  professeurId String
  classe       Classroom @relation(fields: [classroomId], references: [id])
  classroomId  String

  startTime DateTime  @default(now())
  endTime   DateTime?

  participants    User[] @relation("SessionParticipants")
  documentHistory Json[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id             String         @id @default(cuid())
  title          String
  description    String
  points         Int
  type           TaskType
  category       TaskCategory
  difficulty     TaskDifficulty
  validationType ValidationType
  requiresProof  Boolean        @default(false)
  isActive       Boolean        @default(true)

  studentProgress StudentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProgress {
  id             String         @id @default(cuid())
  student        User           @relation(fields: [studentId], references: [id])
  studentId      String
  task           Task           @relation(fields: [taskId], references: [id])
  taskId         String
  status         ProgressStatus @default(PENDING_VALIDATION)
  completionDate DateTime?
  submissionUrl  String?
  pointsAwarded  Int?
  feedback       Json?
  recipeName     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, taskId])
}

model Message {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String

  reactions Reaction[]

  updatedAt DateTime @updatedAt
}

model Reaction {
  id    String @id @default(cuid())
  emoji String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  message   Message @relation(fields: [messageId], references: [id])
  messageId String

  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}

model Announcement {
  id            String  @id @default(cuid())
  title         String
  content       String
  attachmentUrl String?

  author   User   @relation("AnnoncesAuteur", fields: [authorId], references: [id])
  authorId String

  classe   Classroom? @relation("AnnoncesClasse", fields: [classeId], references: [id])
  classeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
