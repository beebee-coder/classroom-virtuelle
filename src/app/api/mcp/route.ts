// src/app/api/mcp/route.ts
import { NextResponse } from 'next/server';
import { DeepSeekMCPAdapter, type MCPMessage } from '@/lib/deepseek-mcp-adapter';

// Initialiser l'adaptateur avec la cl√© API depuis les variables d'environnement
// La cl√© API reste s√©curis√©e sur le serveur.
const deepSeek = new DeepSeekMCPAdapter(process.env.DEEPSEEK_API_KEY!);

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const messages: MCPMessage[] = body.messages;

    if (!messages || !Array.isArray(messages)) {
      return NextResponse.json({ error: 'Le format des messages est invalide.' }, { status: 400 });
    }
    
    console.log('ü§ñ [API MCP] - R√©ception d\'une requ√™te. Appel de DeepSeek...');
    
    // Utiliser l'adaptateur pour obtenir la r√©ponse de l'IA
    const aiResponse = await deepSeek.processMCPRequest(messages);
    
    console.log('‚úÖ [API MCP] - R√©ponse de DeepSeek re√ßue.');
    
    // Retourner la r√©ponse au format JSON
    return NextResponse.json({ response: aiResponse });

  } catch (error) {
    console.error('‚ùå [API MCP] - Erreur interne:', error);
    const errorMessage = error instanceof Error ? error.message : 'Une erreur inconnue est survenue.';
    return NextResponse.json({ error: errorMessage }, { status: 500 });
  }
}
