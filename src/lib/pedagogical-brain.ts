// src/lib/pedagogical-brain.ts

// Type pour une r√©ponse structur√©e de l'assistant
export interface PedagogicalResponse {
  title: string;
  explanation: string;
  example: string;
  tip: string;
  encouragement: string;
}

// Type pour un sujet avec ses mots-cl√©s et sa logique de r√©ponse
interface SubjectDefinition {
  keywords: string[];
  getResponse: (question: string) => PedagogicalResponse;
}

// --- Base de connaissances de notre "cerveau" ---
// C'est ici que nous ajoutons l'intelligence. Chaque entr√©e est un sujet.
const knowledgeBase: Record<string, SubjectDefinition> = {
  photosynthesis: {
    keywords: ['photosynth√®se', 'plante', 'lumi√®re', 'co2', 'oxyg√®ne'],
    getResponse: (question) => ({
      title: 'La Photosynth√®se üåø',
      explanation: "C'est le processus incroyable que les plantes utilisent pour se nourrir. Elles transforment la lumi√®re du soleil, l'eau et le dioxyde de carbone (CO2) de l'air en √©nergie (sucre) pour grandir.",
      example: "Imagine une plante comme une petite usine. Elle aspire le CO2 de l'air avec ses feuilles, boit de l'eau avec ses racines, et utilise la lumi√®re du soleil comme source d'√©nergie. En retour, elle rel√¢che de l'oxyg√®ne, l'air que nous respirons !",
      tip: "Pense au mot : 'photo' (lumi√®re) et 'synth√®se' (fabriquer). La plante fabrique sa nourriture avec la lumi√®re !",
      encouragement: "C'est un concept fondamental en biologie. Le comprendre, c'est comprendre comment la vie sur Terre est possible. Excellente question !",
    }),
  },
  fractions: {
    keywords: ['fraction', 'demi', 'tiers', 'quart', 'num√©rateur', 'd√©nominateur'],
    getResponse: (question) => ({
      title: 'Les Fractions üçï',
      explanation: "Une fraction, c'est simplement une mani√®re de repr√©senter une partie d'un tout. On l'√©crit avec deux nombres superpos√©s.",
      example: "Imagine une pizza coup√©e en 8 parts √©gales. Si tu manges 1 part, tu as mang√© 1/8 de la pizza. '1' est le num√©rateur (combien de parts tu prends) et '8' est le d√©nominateur (le nombre total de parts).",
      tip: "Le nombre du bas (d√©nominateur) te dit en combien de parts on a coup√© le g√¢teau. Le nombre du haut (num√©rateur) te dit combien de parts tu as prises. Facile, non ?",
      encouragement: "Les fractions sont partout autour de nous ! En cuisine, en bricolage... Ma√Ætriser ce concept va t'ouvrir plein de portes. Continue comme √ßa !",
    }),
  },
  default: {
    keywords: [],
    getResponse: (question) => ({
        title: "Voil√† une question int√©ressante !",
        explanation: "Je ne suis pas encore un expert sur ce sujet sp√©cifique, mais c'est une excellente occasion d'apprendre ensemble.",
        example: "Un bon r√©flexe quand on est bloqu√©, c'est de reformuler la question avec des mots plus simples. Par exemple, au lieu de demander 'Qu'est-ce que la gravit√© ?', tu pourrais demander 'Pourquoi les objets tombent-ils ?'.",
        tip: "Essaye de chercher les mots-cl√©s de ta question sur internet ou dans ton livre de cours. Souvent, la r√©ponse s'y cache !",
        encouragement: "N'oublie jamais que chaque question est le d√©but d'une nouvelle d√©couverte. C'est super d'√™tre curieux !",
    }),
  }
};

/**
 * Analyse la question et retourne la meilleure r√©ponse p√©dagogique possible.
 * @param question La question de l'√©l√®ve.
 * @returns Une r√©ponse structur√©e.
 */
function getPedagogicalResponse(question: string): PedagogicalResponse {
    const lowerCaseQuestion = question.toLowerCase();
    
    // Chercher le sujet qui correspond le mieux aux mots-cl√©s
    for (const subjectKey in knowledgeBase) {
        if (subjectKey === 'default') continue;
        const subject = knowledgeBase[subjectKey];
        if (subject.keywords.some(keyword => lowerCaseQuestion.includes(keyword))) {
            console.log(`üß† [Cerveau P√©dagogique] - Sujet d√©tect√©: ${subjectKey}`);
            return subject.getResponse(question);
        }
    }
    
    console.log("üß† [Cerveau P√©dagogique] - Aucun sujet sp√©cifique d√©tect√©, utilisant la r√©ponse par d√©faut.");
    return knowledgeBase.default.getResponse(question);
}

/**
 * Le point d'entr√©e principal de notre service local.
 * Formate la r√©ponse structur√©e en une cha√Æne de caract√®res lisible.
 * @param question La question de l'√©l√®ve.
 * @returns Une cha√Æne de caract√®res format√©e.
 */
export async function processLocalLLM(question: string): Promise<string> {
    // Simule une petite latence pour une exp√©rience utilisateur plus r√©aliste
    await new Promise(res => setTimeout(res, 500 + Math.random() * 500));
    
    const response = getPedagogicalResponse(question);
    
    // Formater la r√©ponse structur√©e en une seule cha√Æne de caract√®res
    return `
### ${response.title}

**Explication simple :**
${response.explanation}

**Exemple concret :**
${response.example}

**Astuce pour s'en souvenir :**
${response.tip}

> ${response.encouragement}
  `.trim();
}
