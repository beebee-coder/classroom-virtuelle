// src/lib/redis.ts
import Redis from 'ioredis';

// Assurez-vous que votre variable d'environnement REDIS_URL est d√©finie.
if (!process.env.REDIS_URL) {
    console.warn("‚ö†Ô∏è Avertissement : La variable d'environnement REDIS_URL n'est pas d√©finie. Redis ne sera pas utilis√©.");
}

// Configuration de la strat√©gie de reconnexion
const retryStrategy = (times: number): number | null => {
    // Si nous avons d√©j√† essay√© 3 fois, on abandonne.
    if (times > 3) {
      console.error("‚ùå Redis: Nombre maximum de tentatives de reconnexion atteint. Abandon de la connexion.");
      return null;
    }
    // D√©lai exponentiel : 500ms, 1000ms, 2000ms
    const delay = Math.min(times * 500, 2000);
    console.log(`üîå Redis: Tentative de reconnexion n¬∞${times}. Prochaine tentative dans ${delay}ms.`);
    return delay;
};


// Cr√©e un client Redis. L'option `lazyConnect` emp√™che la connexion imm√©diate.
const redis = process.env.REDIS_URL 
    ? new Redis(process.env.REDIS_URL, { 
        lazyConnect: true,
        retryStrategy: retryStrategy, // Appliquer la nouvelle strat√©gie
        maxRetriesPerRequest: 1, // √âviter qu'une seule commande soit r√©essay√©e ind√©finiment
      }) 
    : null;

// G√©rer les erreurs de connexion de mani√®re asynchrone pour ne pas bloquer le serveur
if (redis) {
    redis.on('error', (err) => {
        // Le logging est d√©j√† g√©r√© par retryStrategy, on √©vite le bruit.
        // On peut logguer une fois si n√©cessaire :
        // console.error('‚ùå Erreur de connexion Redis:', err.message);
    });

    redis.on('connect', () => {
        console.log('‚úÖ Connect√© √† Redis avec succ√®s.');
    });
}

export default redis;
