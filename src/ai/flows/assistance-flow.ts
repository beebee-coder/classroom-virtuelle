
/**
 * @fileoverview Flow d'assistance p√©dagogique avec Gemini, utilisant un appel direct √† l'API.
 */
'use server';

export async function askAssistance(question: string): Promise<{ answer: string }> {
  // Validation simple de la question
  if (!question?.trim() || question.length < 3) {
    return {
      answer: "‚ùì **Question trop courte** : Pourriez-vous formuler une question plus pr√©cise ?"
    };
  }

  const apiKey = process.env.GEMINI_API_KEY;

  if (!apiKey) {
    console.error('‚ùå ERREUR CONFIGURATION: Cl√© API Gemini manquante.');
    throw new Error('Configuration API manquante.');
  }

  // Utilisation d'un mod√®le stable et confirm√©
  const model = 'gemini-pro'; 

  const prompt = `
Tu es "Clary", un assistant p√©dagogique expert pour coll√©giens fran√ßais.
Ton r√¥le est d'aider √† comprendre, pas de donner les r√©ponses toutes faites.

QUESTION DE L'√âL√àVE: "${question}"

GUIDELINES STRICTES:
- Explique le concept de mani√®re simple et concr√®te.
- Utilise des exemples de la vie quotidienne.
- Donne des m√©thodes et indices, JAMAIS la r√©ponse finale.
- Sois encourageant et positif.
- Structure en 3 parties claires.

STRUCTURE DE R√âPONSE:
1. üß† **Explication** : Valide la question et explique le concept clairement.
2. üí° **M√©thode** : Donne une piste pour trouver la solution soi-m√™me.
3. ‚ú® **Encouragement** : Termine par une phrase motivante.

Langue: Fran√ßais uniquement.
Style: Chaleureux, accessible, p√©dagogique.
  `;
  
  // CORRECTION : Le format du payload doit inclure le r√¥le 'user'.
  const requestBody = {
    contents: [
      {
        role: 'user', // R√¥le de l'utilisateur
        parts: [{ text: prompt }]
      }
    ]
  };

  try {
    console.log(`üìö Assistance demand√©e pour: "${question.substring(0, 50)}..."`);
    const endpoint = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;

    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Erreur API Gemini (${response.status}):`, errorText);
      throw new Error(`Erreur API Gemini: ${response.statusText}`);
    }

    const data = await response.json();
    
    // CORRECTION : Gestion plus robuste de la r√©ponse de l'API.
    const aiResponse = data?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (aiResponse) {
        console.log('‚úÖ Assistance fournie avec succ√®s');
        return { answer: aiResponse.trim() };
    } else {
        console.warn('‚ö†Ô∏è R√©ponse de l\'API Gemini vide ou mal form√©e:', data);
        return { 
            answer: "ü§ñ Oups ! J'ai bien re√ßu votre question, mais je n'ai pas r√©ussi √† formuler une r√©ponse. Pourriez-vous essayer de reformuler ?" 
        };
    }

  } catch (error: any) {
    console.error('‚ùå Erreur dans askAssistance:', error);
    
    return {
      answer: `üß† **Explication** : Je rencontre une difficult√© technique momentan√©e.\n\nüí° **Conseil** : Pour "${question}", je vous sugg√®re de :\n‚Ä¢ Consulter vos cours et manuels.\n‚Ä¢ Noter les points pr√©cis qui vous bloquent.\n‚Ä¢ En parler avec votre professeur.\n\n‚ú® **Encouragement** : Les obstacles passent, mais votre curiosit√© reste ! Continuez !`
    };
  }
}
