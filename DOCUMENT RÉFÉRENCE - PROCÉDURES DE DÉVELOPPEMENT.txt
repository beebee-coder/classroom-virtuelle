üìã DOCUMENT R√âF√âRENCE - PROC√âDURES DE D√âVELOPPEMENT

ARTICLE 1 : CADRE G√âN√âRAL

1.1 Stack Technique Imposable

{
  "metadata": {
    "document_version": "2.1",
    "enforcement_level": "STRICTE",
    "compliance_required": true
  },
  "technical_stack": {
    "framework": {
      "name": "Next.js",
      "version": "14.2.0",
      "stability_index": 98,
      "lts_until": "2025-08-01"
    },
    "database": {
      "name": "PostgreSQL",
      "version": "15.6",
      "orm": "Prisma",
      "orm_version": "5.10.2",
      "migration_strategy": "safe-ddl"
    },
    "authentication": {
      "name": "Auth.js",
      "version": "4.24.5",
      "adapter": "@auth/prisma-adapter@1.0.7"
    },
    "styling": {
      "name": "TailwindCSS",
      "version": "3.4.1",
      "config": "tailwind.config.js"
    },
    "typescript": {
      "version": "5.4.5",
      "strict": true,
      "config": "tsconfig.json"
    }
  }
}

ARTICLE 2 : PROC√âDURES DE D√âVELOPPEMENT AUTOMATIQUES

2.1 Avant Tout D√©veloppement - Phase d'Analyse
Prompt Automatique :

SYSTEM: R√©f√©rencez l'article 2.1 du document proc√©dural.
USER: [Description de la fonctionnalit√©]
ASSISTANT: 
1. ANALYSE_COMPATIBILIT√â_STACK() ‚Üí V√©rifier conformit√© avec stack impos√©e
2. IDENTIFIER_DEPENDENCES() ‚Üí Lister packages n√©cessaires
3. VALIDER_VERSION() ‚Üí Confirmer versions autoris√©es
4. PROPOSER_ARCHITECTURE() ‚Üí Structure selon standards
2.2 Pendant le D√©veloppement - Contr√¥les Automatiques
Checklists Int√©gr√©es :

// V√âRIFICATIONS AUTOMATIQUES
const validations = {
  security: [
    "‚úÖ Validation des inputs",
    "‚úÖ Gestion des erreurs s√©curis√©e", 
    "‚úÖ Protection CSRF/XSS",
    "‚úÖ Sanitization des donn√©es"
  ],
  performance: [
    "‚úÖ Composants optimis√©s",
    "‚úÖ Chargement lazy impl√©ment√©",
    "‚úÖ Images optimis√©es",
    "‚úÖ Code splitting v√©rifi√©"
  ],
  quality: [
    "‚úÖ Typage TypeScript strict",
    "‚úÖ Tests unitaires couvrants",
    "‚úÖ Documentation code compl√®te",
    "‚úÖ Accessibilit√© respect√©e"
  ]
}

2.3 Apr√®s D√©veloppement - Revue de Code Automatis√©e
Template de Revue :

## üìã REVUE TECHNIQUE AUTOMATIS√âE

### CONFORMIT√â STACK
- [ ] Next.js 14.2.0 ‚úÖ
- [ ] Prisma 5.10.2 ‚úÖ  
- [ ] TypeScript 5.4.5 ‚úÖ
- [ ] Tailwind 3.4.1 ‚úÖ

### QUALIT√â CODE
- [ ] Aucun warning TypeScript
- [ ] Tests passants √† 100%
- [ ] Couverture > 80%
- [ ] Performance Core Web Vitals

### S√âCURIT√â
- [ ] Aucune vuln√©rabilit√© npm audit
- [ ] Validation donn√©es impl√©ment√©e
- [ ] Secrets non expos√©s


ARTICLE 3 : TEMPLATES DE CODE IMPOS√âS
3.1 Template de Composant React

// templates/component.strict.tsx
import { ReactNode } from 'react';

interface StrictComponentProps {
  children?: ReactNode;
  // Props typ√©es strictement
}

/**
 * @description Composant conforme article 3.1
 * @version 2.1
 * @compliance STRICTE
 */
export default function StrictComponent({ 
  children 
}: StrictComponentProps) {
  // Impl√©mentation selon standards
  return (
    <div className="container mx-auto p-4">
      {children}
    </div>
  );
}

3.2 Template d'API Route

// templates/api.strict.ts
import { NextApiRequest, NextApiResponse } from 'next';
import { z } from 'zod';

const requestSchema = z.object({
  // Schema de validation strict
});

/**
 * @description API route conforme article 3.2
 * @compliance SECURITY_LEVEL_HIGH
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    // Validation automatique des inputs
    const validatedData = requestSchema.parse(req.body);
    
    // Logique m√©tier
    
    res.status(200).json({ success: true });
  } catch (error) {
    // Gestion d'erreur standardis√©e
    res.status(400).json({ error: 'Invalid request' });
  }
}

ARTICLE 4 : VALIDATIONS ET TESTS AUTOMATIS√âS
4.1 Scripts de Validation Impos√©s

{
  "scripts": {
    "validate:stack": "node scripts/validate-stack.js",
    "validate:security": "npm audit --audit-level high",
    "validate:types": "tsc --noEmit --strict",
    "validate:build": "next build --no-lint",
    "test:full": "jest --coverage --watchAll=false"
  }
}

4.2 Configuration de Test Automatique

// jest.config.strict.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
};

ARTICLE 5 : GESTION DES ERREURS ET MONITORING
5.1 Proc√©dure de Gestion d'Erreurs

// lib/error-handling.strict.ts
export class AppError extends Error {
  constructor(
    public code: string,
    public userMessage: string,
    public severity: 'low' | 'medium' | 'high'
  ) {
    super(userMessage);
  }
}

// Template de gestion d'erreur impos√©
export function handleError(error: unknown) {
  // Logging standardis√©
  // Monitoring automatique
  // Retour utilisateur s√©curis√©
}

ARTICLE 6 : DOCUMENTATION ET MAINTENANCE
6.1 Template de Documentation

# DOCUMENTATION TECHNIQUE - [COMPOSANT/FONCTIONNALIT√â]

## CONFORMIT√â
- ‚úÖ Stack: Next.js 14.2.0 + Prisma 5.10.2
- ‚úÖ S√©curit√©: Niveau HIGH
- ‚úÖ Performance: Core Web Vitals optimis√©s

## DEPENDENCES
- Packages: [liste versions exactes]
- Compatibilit√©: [v√©rification effectu√©e]

## TESTS
- Couverture: > 80%
- Sc√©narios: [liste]
- Performance: [r√©sultats]

## MAINTENANCE
- Derni√®re review: [date]
- Prochaine v√©rification: [date + 30j]

ARTICLE 7 : GESTION DES SECRETS ET VARIABLES D'ENVIRONNEMENT

7.1 Interdiction de Modification du Fichier .env
L'assistant IA ne doit JAMAIS modifier le contenu du fichier `.env`. Ce fichier est sous le contr√¥le exclusif de l'utilisateur. En cas de n√©cessit√© (ex: ajout d'une `DATABASE_URL`), l'assistant doit guider l'utilisateur sur la proc√©dure √† suivre, mais ne doit en aucun cas g√©n√©rer de modification pour ce fichier.

ARTICLE 8 : INT√âGRIT√â DE LA STRUCTURE DU PROJET

8.1 Prohibition de Duplication
Il est formellement interdit d'ajouter un fichier ou un dossier qui est une copie exacte ou quasi-exacte d'un √©l√©ment existant. Si un fichier doit √™tre modifi√©, il doit √™tre modifi√© sur place. La cr√©ation de doublons (ex: `file-copy.tsx`, `dossier_v2/`) est une violation de cette proc√©dure.

ARTICLE 9 : INT√âGRIT√â DE L'EN-T√äTE DU SCH√âMA PRISMA

9.1 Interdiction de Modification de l'En-t√™te de `schema.prisma`
L'assistant IA ne doit JAMAIS modifier les blocs `datasource` et `generator` situ√©s en en-t√™te du fichier `prisma/schema.prisma`. Ces blocs sont consid√©r√©s comme des configurations critiques sous le contr√¥le de l'utilisateur.

// BLOC PROT√âG√â - NE PAS MODIFIER
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

PROTOCOLE D'APPLICATION
Tout d√©veloppement DOIT suivre cette proc√©dure :

1. R√©f√©rencer l'article applicable avant codage
2. Utiliser les templates impos√©s
3. Ex√©cuter les validations automatiques
4. Documenter selon le format standard
5. Archiver la conformit√© technique

Ce document est ex√©cutoire pour toute assistance au d√©veloppement. Non-conformit√© = rejet automatique.
